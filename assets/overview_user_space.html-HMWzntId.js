import{_ as s,r as t,c as l,o as i,a as n,e as a,d as o,b as g}from"./app-Ne0PdyYx.js";const d="/assets/secondary-users-DNaWzgra.svg",p="/assets/image-20240418141423673-CunriGaa.png",c={},u={href:"https://developer.android.google.cn/work/dpc/dedicated-devices/multiple-users?hl=lt",target:"_blank",rel:"noopener noreferrer"};function h(m,e){const r=t("ExternalLinkIcon");return i(),l("div",null,[e[1]||(e[1]=n("h2",{id:"安卓系统中的多用户空间",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安卓系统中的多用户空间","aria-hidden":"true"},"#"),o(" 安卓系统中的多用户空间")],-1)),e[2]||(e[2]=n("p",null,"在Android系统中，多用户空间是一个非常有用的特性，它允许设备的不同用户拥有自己的个人化环境和数据。这种特性在平板电脑或共享设备的情况下尤其有价值。从Android 4.2（Jelly Bean）开始，Android开始支持多用户功能。",-1)),n("p",null,[n("a",u,[e[0]||(e[0]=o("管理多个用户 | Android 开发者 | Android Developers (google.cn)")),g(r)])]),e[3]||(e[3]=a('<p>以下是从安卓开发者角度来看待多用户空间的一些主要观点：</p><ol><li><strong>用户和用户空间</strong>：每个用户都有自己的用户空间，包括一组特定的系统设置、应用程序和相关数据。每个用户空间都是独立的，保护了各个用户的隐私。</li><li><strong>应用程序和数据隔离</strong>：每个用户的应用程序和数据都是分开的。一个用户安装的应用程序不会出现在另一个用户的用户空间中，除非另一个用户也安装了同样的应用程序。同样，一个用户的应用数据是不可见的，不能被另一个用户访问。</li><li><strong>应用程序生命周期</strong>：对于运行在前台的用户，系统会优先分配资源。当用户切换时，系统会将之前用户的应用程序转移到后台，可能会被系统暂停或停止。开发者需要处理好这些生命周期事件，以确保应用程序的正常运行和数据的完整性。</li><li><strong>用户切换</strong>：用户可以在系统设置中切换用户。应用程序需要能够处理用户切换的情况，例如，当用户切换时，可能需要保存当前状态，然后在新用户登录时恢复这些状态。</li><li><strong>权限和安全</strong>：每个用户都有自己的安全上下文，包括一组特定的权限和访问控制。应用程序需要在每个用户的上下文中分别请求和管理权限。</li><li><strong>测试和调试</strong>：开发者需要测试在多用户环境中的应用程序行为，包括数据隔离、权限管理、用户切换等情况。Android提供了一些工具和API来帮助开发者在多用户环境中测试和调试应用程序。</li></ol><p align="center"><img src="'+d+'" width="800"></p><p><em><strong><p align="center">图1. 由同一 DPC 中的管理员管理的主要和次要用户 </p></strong></em></p><h2 id="扩展到glass-plugin容器" tabindex="-1"><a class="header-anchor" href="#扩展到glass-plugin容器" aria-hidden="true">#</a> 扩展到Glass Plugin容器</h2><p>同样的，参考安卓多用户的概念和实际需求，我们为<code>Glass Plugin Container</code>也设计了多用户空间的概念。不同用户空间之间安装的App和数据相互隔离，同一空间内的App可以相互通信，以满足某些场景下多用户需求，为用户提供更多的个性化体验和数据安全保障。</p><p align="center"><img src="'+p+'" alt="image-20240418141423673" width="800"></p><p><em><strong><p align="center">图2. Glass Plugin容器多用户结构 </p></strong></em></p><blockquote><p>以下是在<code>Glass Plugin Container</code>中实现多用户空间的一些可能的应用场景和优点。</p></blockquote><div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">INFO</p><ol><li><strong>共享设备</strong>：针对现有企业中的XR设备使用，绝大多数受限于XR设备价格，人们可能会共享同一台设备。在这种情况下，多用户空间可以确保每位员工都有自己的个性化环境，包括安装的应用程序和个人数据。这可以提高设备的使用效率，同时保护每个员工的数据安全。</li><li><strong>个性化体验</strong>：依托多用户空间，每位用户都可以根据自己的需求和喜好，安装和配置应用程序，排列他的启动页<code>Launcher</code>。这使得每个用户都可以获得独特的、个性化的使用体验。</li><li><strong>数据安全</strong>：由于每个用户的数据都是隔离的，因此即使一个用户的数据被破坏或泄露，也不会影响到其他用户。这大大增强了数据的安全性。</li><li><strong>测试和开发</strong>：开发者可以在一个用户空间中安装和测试新的或未发布的应用程序，而不会影响到其他用户空间的稳定性和数据完整性。</li><li><strong>权限管理</strong>：每个用户空间都有自己的权限设置，这使得设备的管理员可以根据需要，为每个用户配置不同的应用访问权限。例如，公司可以限制员工访问某些敏感信息。</li><li><strong>节省存储空间</strong>：在多用户空间中，同一个应用程序的代码只需要存储一次，但每个用户的数据是隔离的。这样既可以节省存储空间，又可以保证数据的隔离性。</li></ol></div>',10))])}const _=s(c,[["render",h],["__file","overview_user_space.html.vue"]]);export{_ as default};
