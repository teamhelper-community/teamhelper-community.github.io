import{_ as o,r as p,c as i,o as c,e as s,a,d as e,b as l}from"./app-Ne0PdyYx.js";const u={},d={href:"https://github.com/LSPosed/LSPosed",target:"_blank",rel:"noopener noreferrer"};function r(k,n){const t=p("ExternalLinkIcon");return c(),i("div",null,[n[3]||(n[3]=s('<div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>⚠️<strong>Experimental</strong>：容器插件间通信API未来可能会有变更，目前处于快速开发阶段。</p></div><h2 id="基础原理" tabindex="-1"><a class="header-anchor" href="#基础原理" aria-hidden="true">#</a> 基础原理</h2>',2)),a("p",null,[n[1]||(n[1]=s("目前容器和插件间通信通过<code>Hook</code>机制完成，<code>Glass Plugin Container</code>会监听所有新<code>fork</code>的插件应用进程，并在<code>afterApplicationOnCreate</code>阶段完成插件应用中桥方法的<code>Hook</code>，使得插件应用在运行时对桥方法的调用会被<code>Hook</code>逻辑接管，动态获取请求参数并修改方法的返回值来实现容器与插件间通信。<code>Hook</code>采用",15)),a("a",d,[n[0]||(n[0]=e("LSPosed/LSPosed: LSPosed Framework (github.com)")),l(t)]),n[2]||(n[2]=e("实现。"))]),n[4]||(n[4]=s(`<h2 id="编写通信桥" tabindex="-1"><a class="header-anchor" href="#编写通信桥" aria-hidden="true">#</a> 编写通信桥</h2><h3 id="定义通信桥模块" tabindex="-1"><a class="header-anchor" href="#定义通信桥模块" aria-hidden="true">#</a> 定义通信桥模块</h3><p>参照<a href="./docs/pluggable_container/standard_container_arch">插件容器标准项目结构</a>，在<code>PluginEngine</code>模块下新建<code>PluginBridge</code>模块，在模块中定义<code>Bridge Method</code>，以下文为例，我们尝试构建一个<code>Bridge.test()</code>方法供给插件应用在运行时调用，并在<code>Bridge Method Hook</code>逻辑中<code>Hook</code>插件应用的运行时调用的返回值。</p><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p><code>Bridge Method</code>需要被插件化容器加载并Hook，同时需要为插件应用在编译期提供符号表链接，因此<code>Bridge Method</code>所属的<code>class</code>和<code>method</code>必须反混淆。此外为了减少开发者在编写<code>Bridge Method Hook</code>的负担，建议<code>Bridge Method</code>采用<code>Java Lang</code>定义，因为<code>Kotlin</code>部分场景下会在编译期间生成额外的<code>class level</code>。</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Keep</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bridge</span> <span class="token keyword">extends</span> <span class="token class-name">TestClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">testBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;STUB&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写bridge-method-hook" tabindex="-1"><a class="header-anchor" href="#编写bridge-method-hook" aria-hidden="true">#</a> 编写Bridge Method Hook</h3><p><code>Bridge Method Hook</code>在插件化容器中完成，具体时机在产生新<code>fork</code>的插件应用进程的<code>afterApplicationOnCreate</code>阶段完成插件应用中桥方法的<code>Hook</code>。</p><p>因此我们需要监听插件应用的生命周期，在<code>afterApplicationOnCreate</code>阶段通过<code>application</code>的<code>classLoader</code>注入<code>Hook</code>。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>BlackBoxCore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAppLifecycleCallback</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">AppLifecycleCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">afterApplicationOnCreate</span><span class="token punctuation">(</span>
        packageName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>
        processName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>
        application<span class="token operator">:</span> Application<span class="token punctuation">,</span>
        userId<span class="token operator">:</span> Int
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;beforeApplicationOnCreate: pkg </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">packageName</span></span><span class="token string">, processName </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">processName</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token comment">/**
         * Xposed Hook
         */</span>
        <span class="token function">initHooks</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> BridgeHook<span class="token punctuation">)</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterApplicationOnCreate</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> processName<span class="token punctuation">,</span> application<span class="token punctuation">,</span> userId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>⚠️<strong>Experimental</strong>：现阶段可以参照实现<code>Hook</code>，后续版本会提供更简便的<code>Hook</code>方式。</p></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> BridgeHook <span class="token operator">:</span> <span class="token function">BaseHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token keyword">init</span><span class="token punctuation">(</span>application<span class="token operator">:</span> Application<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        XposedBridge<span class="token punctuation">.</span><span class="token function">hookAllMethods</span><span class="token punctuation">(</span>
            application<span class="token punctuation">.</span>classLoader<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;host.Bridge&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;testBridge&quot;</span></span><span class="token punctuation">,</span>
            <span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">XC_MethodHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>Throwable<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">beforeHookedMethod</span><span class="token punctuation">(</span>param<span class="token operator">:</span> MethodHookParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    param<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;test Result&quot;</span></span><span class="token punctuation">)</span>
                    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">beforeHookedMethod</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseHook <span class="token punctuation">{</span>
    <span class="token keyword">var</span> isInit<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token keyword">init</span><span class="token punctuation">(</span>application<span class="token operator">:</span> Application<span class="token punctuation">)</span>

    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
        <span class="token keyword">fun</span> <span class="token function">initHooks</span><span class="token punctuation">(</span>application<span class="token operator">:</span> Application<span class="token punctuation">,</span> <span class="token keyword">vararg</span> hook<span class="token operator">:</span> BaseHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            hook<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
                runCatching <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span>isInit<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token label symbol">@forEach</span>
                    it<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span>
                    it<span class="token punctuation">.</span>isInit <span class="token operator">=</span> <span class="token boolean">true</span>
                    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>EngineStartup<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Inited hook: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">it<span class="token punctuation">.</span>javaClass<span class="token punctuation">.</span>simpleName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插件应用中调用bridge-method" tabindex="-1"><a class="header-anchor" href="#插件应用中调用bridge-method" aria-hidden="true">#</a> 插件应用中调用Bridge Method</h2><h3 id="添加bridge模块符号表链接" tabindex="-1"><a class="header-anchor" href="#添加bridge模块符号表链接" aria-hidden="true">#</a> 添加Bridge模块符号表链接</h3><p>在你开发的插件应用模块中使用<code>compileOnly</code>方式添加<code>PluginBridge</code>的运行时符号链接，真实的<code>PluginBridge</code>相关类将在插件容器初始化时统一加载并启动<code>Hook</code>。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>dependencies <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token function">compileOnly</span><span class="token punctuation">(</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;:PluginEngine:PluginBridge&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调用bridge-method" tabindex="-1"><a class="header-anchor" href="#调用bridge-method" aria-hidden="true">#</a> 调用Bridge Method</h3><p>在插件应用开发时调用只需要像普通API一样调用即可。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token keyword">import</span> host<span class="token punctuation">.</span>Bridge

<span class="token keyword">class</span> MainActivity <span class="token operator">:</span> GlassBaseActivity<span class="token operator">&lt;</span>ActivityMainBinding<span class="token punctuation">,</span> EmptyViewModel<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">initParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        v<span class="token punctuation">.</span>btnConfirm<span class="token punctuation">.</span><span class="token function">setInstruct</span><span class="token punctuation">(</span><span class="token function">InstructSingle</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;que ding&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;确定&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;confirm&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>btnConfirm<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>
            <span class="token function">toast</span><span class="token punctuation">(</span>Bridge<span class="token punctuation">.</span><span class="token function">testBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        v<span class="token punctuation">.</span>btnConfirm<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">registerObserve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19))])}const m=o(u,[["render",r],["__file","container_plugin_communication.html.vue"]]);export{m as default};
