import{_ as a,c as n,o as s,e as r}from"./app-Ne0PdyYx.js";const t={};function i(o,e){return s(),n("div",null,e[0]||(e[0]=[r(`<h1 id="teamhelper-bridge-sdk-开发者文档" tabindex="-1"><a class="header-anchor" href="#teamhelper-bridge-sdk-开发者文档" aria-hidden="true">#</a> Teamhelper Bridge SDK 开发者文档</h1><p>Teamhelper Bridge SDK 专注于 IPC/RPC 通信，用于插件化基座中 Launcher 与插件应用之间以及插件应用之间的互联互通。该 SDK 通过高效的通信协议支持 Text 与 Binary 模式，支持 JSON 与 Protobuf 多种报文格式，满足不同场景下的通信需求。未来，Bridge SDK 将扩展为同一虚拟子网内的 RPC 通信，并在协议设计上支持指环拓扑、中心化算力设施以及手机、平板、手表、车机 RTOS 等各类端侧设备的发现与互联。</p><h2 id="_1-sdk-集成方式" tabindex="-1"><a class="header-anchor" href="#_1-sdk-集成方式" aria-hidden="true">#</a> 1. SDK 集成方式</h2><h3 id="_1-1-添加-maven-仓库" tabindex="-1"><a class="header-anchor" href="#_1-1-添加-maven-仓库" aria-hidden="true">#</a> 1.1 添加 Maven 仓库</h3><p>在项目的构建脚本中（例如 Gradle 的 <code>build.gradle</code> 文件），添加以下 Maven 仓库配置：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token function">maven</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;http://maven.teamhelper.cn:8081/repository/MST/&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    isAllowInsecureProtocol <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-添加依赖" tabindex="-1"><a class="header-anchor" href="#_1-2-添加依赖" aria-hidden="true">#</a> 1.2 添加依赖</h3><p>在依赖配置中加入以下实现依赖：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;com.teamhelper.xr:glass-bridge:0.0.13&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完成上述配置后，即可在项目中使用 Bridge SDK 提供的 IPC/RPC 通信能力。</p><hr><h2 id="_2-sdk-功能概述" tabindex="-1"><a class="header-anchor" href="#_2-sdk-功能概述" aria-hidden="true">#</a> 2. SDK 功能概述</h2><p>Bridge SDK 的主要功能包括：</p><ul><li><strong>IPC 通信</strong>：支持同一设备内不同进程之间的消息传递，适用于 Launcher 与插件应用之间的通信。</li><li><strong>RPC 通信</strong>：支持局域网内多设备间的消息交互，未来将扩展至同一虚拟子网内的高效 RPC 通信。</li><li><strong>多协议支持</strong>：协议设计支持 Text 模式与 Binary 模式，分别对应 JSON 与 Protobuf 等多种消息格式，满足不同开发需求。</li><li><strong>事件监听</strong>：提供 Launcher 与插件应用的事件监听接口，支持设备上线下线、消息接收等事件回调，便于开发者及时处理各类通信事件。</li></ul><hr>`,15)]))}const l=a(t,[["render",i],["__file","bridge_quick_start.html.vue"]]);export{l as default};
