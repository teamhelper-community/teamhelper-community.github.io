import{_ as d,c as a,o,e as c}from"./app-Ne0PdyYx.js";const i={};function l(r,e){return o(),a("div",null,e[0]||(e[0]=[c('<h2 id="兼容性需求" tabindex="-1"><a class="header-anchor" href="#兼容性需求" aria-hidden="true">#</a> 兼容性需求</h2><ol><li>插件化引擎支持市场上主流的XR眼镜的安卓系统版本（安卓6.0到的安卓14的兼容）</li><li>封装的UI组件逻辑层兼容市场上主流的XR眼镜设备的语音指令、各类触摸板和旋钮等设备的操作交互</li><li>对麦克风和相机焦点的处理</li></ol><h2 id="架构方面需求" tabindex="-1"><a class="header-anchor" href="#架构方面需求" aria-hidden="true">#</a> 架构方面需求</h2><ul><li>SDK包括若干组API，用于与插件平台系统的各个系统服务进行交互或取得额外的能力。</li><li>支持<code>armv7</code>和<code>armv8</code>架构</li><li>插件化相关代码编译后体积方面尽可能小</li><li>不允许存在与插件化相关的闭源代码和恶意后门，如部分闭源so库（工业领域和国企的移动安全要求）</li></ul><h2 id="功能性需求" tabindex="-1"><a class="header-anchor" href="#功能性需求" aria-hidden="true">#</a> 功能性需求</h2><h3 id="相互通信需求" tabindex="-1"><a class="header-anchor" href="#相互通信需求" aria-hidden="true">#</a> 相互通信需求</h3><ol><li>宿主可以对插件的<code>Runtime</code>进行<code>Hook</code>，也即对插件apk调用的指定的<code>class</code>和<code>class-&gt;method</code>进行Hook。达到插件调用插件自身dex里没有的<code>java class</code>时能成功的从宿主的<code>classloader</code>中<code>findClass</code>到的效果；并且宿主能控制插件apk调用<code>class-&gt;method</code>的具体返回值和执行逻辑（IAT）；也即插件能调用宿主相关类和方法。</li><li>插件能调用宿主的<code>Activity</code>并通过<code>onActivityResult</code>拿到返回数据，和1实现方式可能稍有区别（普通类和<code>Activity</code>，也可能不需要处理）</li><li>宿主能反射调用插件的<code>Activity</code>和任意<code>java class</code></li></ol><h3 id="插件应用管理需求" tabindex="-1"><a class="header-anchor" href="#插件应用管理需求" aria-hidden="true">#</a> 插件应用管理需求</h3><ol><li>宿主可以通过一定的管理接口管理插件APK的虚拟化数据目录、GPS位置、一些需要运行时权限的功能可以做到权限隔离，在宿主拥有<code>Camera</code>权限时禁止插件使用<code>Camera</code>，并抛出权限不足的异常。</li><li>宿主包含对插件APK的管理接口</li></ol>',9)]))}const t=d(i,[["render",l],["__file","design_standards.html.vue"]]);export{t as default};
