import{_ as u,r as o,c as r,o as d,e as p,b as t,a as n,w as e,d as a}from"./app-Ne0PdyYx.js";const k={};function m(v,s){const c=o("CodeGroupItem"),l=o("CodeGroup"),i=o("RouterLink");return d(),r("div",null,[s[10]||(s[10]=p('<p>Fragment用法基本与Activity保持一致。如果你掌握了<a href="template_base_class_base_activity">Activity基类</a>的用法，那么<code>GlassBaseFragment</code>的用法将符合你的开发者直觉。</p><h2 id="快速使用" tabindex="-1"><a class="header-anchor" href="#快速使用" aria-hidden="true">#</a> 快速使用</h2><p>创建一个新的<code>Fragment</code>继承自<code>GlassBaseFragment</code>，其中<code>GlassBaseFragment</code>继承时需要传入当前<code>Fragment</code>的<code>DataBinding</code>泛型类型和<code>ViewModel</code>类型，这样<code>GlassBaseFragment</code>的子类实例化时会根据类型信息通过反射自动创建<code>DataBinding</code>和<code>ViewModel</code>实例。以下是一个简易的代码示例。</p>',3)),t(l,null,{default:e(()=>[t(c,{title:"TestFragment.kt"},{default:e(()=>s[0]||(s[0]=[n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token keyword"},"class"),a(" MainActivity "),n("span",{class:"token operator"},":"),a(" GlassBaseFragment"),n("span",{class:"token operator"},"<"),a("FragmentTestBinding"),n("span",{class:"token punctuation"},","),a(" EmptyViewModel"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`

    `),n("span",{class:"token keyword"},"override"),a(),n("span",{class:"token keyword"},"fun"),a(),n("span",{class:"token function"},"initData"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`

    `),n("span",{class:"token punctuation"},"}"),a(`

    `),n("span",{class:"token keyword"},"override"),a(),n("span",{class:"token keyword"},"fun"),a(),n("span",{class:"token function"},"initData"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`

    `),n("span",{class:"token punctuation"},"}"),a(`

    `),n("span",{class:"token keyword"},"override"),a(),n("span",{class:"token keyword"},"fun"),a(),n("span",{class:"token function"},"initView"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
      	`),n("span",{class:"token comment"},"// v为FragmentTestBinding:ViewDataBinding的实例"),a(`
        v`),n("span",{class:"token punctuation"},"."),a("btnConfirm"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setInstruct"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"InstructSingle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"que ding"')]),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"确定"')]),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"confirm"')]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
        v`),n("span",{class:"token punctuation"},"."),a("btnConfirm"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setOnClickListener"),a(),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token function"},"toast"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"confirm"')]),n("span",{class:"token punctuation"},")"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`
        v`),n("span",{class:"token punctuation"},"."),a("btnConfirm"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"focus"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`

    `),n("span",{class:"token keyword"},"override"),a(),n("span",{class:"token keyword"},"fun"),a(),n("span",{class:"token function"},"registerObserve"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`

    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1})]),_:1}),t(l,null,{default:e(()=>[t(c,{title:"fragment_test.xml"},{default:e(()=>s[1]||(s[1]=[n("div",{class:"language-xml line-numbers-mode","data-ext":"xml"},[n("pre",{class:"language-xml"},[n("code",null,[n("span",{class:"token prolog"},'<?xml version="1.0" encoding="utf-8"?>'),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("layout")]),n("span",{class:"token punctuation"},">")]),a(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("androidx.constraintlayout.widget.ConstraintLayout")]),a(),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"xmlns:"),a("android")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("http://schemas.android.com/apk/res/android"),n("span",{class:"token punctuation"},'"')]),a(`
        `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"xmlns:"),a("app")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("http://schemas.android.com/apk/res-auto"),n("span",{class:"token punctuation"},'"')]),a(`
        `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"xmlns:"),a("tools")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("http://schemas.android.com/tools"),n("span",{class:"token punctuation"},'"')]),a(`
        `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"android:"),a("layout_width")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("match_parent"),n("span",{class:"token punctuation"},'"')]),a(`
        `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"android:"),a("layout_height")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("match_parent"),n("span",{class:"token punctuation"},'"')]),a(`
        `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"tools:"),a("context")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a(".MainActivity"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`

        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("com.mst.basics.slide.widget.v2.GlassButton")]),a(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"android:"),a("id")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("@+id/btn_confirm"),n("span",{class:"token punctuation"},'"')]),a(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"app:"),a("sign")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("1"),n("span",{class:"token punctuation"},'"')]),a(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"app:"),a("layout_constraintStart_toStartOf")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("parent"),n("span",{class:"token punctuation"},'"')]),a(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"app:"),a("layout_constraintTop_toTopOf")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("parent"),n("span",{class:"token punctuation"},'"')]),a(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"app:"),a("layout_constraintEnd_toEndOf")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("parent"),n("span",{class:"token punctuation"},'"')]),a(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"app:"),a("layout_constraintBottom_toBottomOf")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("parent"),n("span",{class:"token punctuation"},'"')]),a(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"android:"),a("layout_width")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("wrap_content"),n("span",{class:"token punctuation"},'"')]),a(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"android:"),a("layout_height")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("wrap_content"),n("span",{class:"token punctuation"},'"')]),a(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"android:"),a("text")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("确定"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token punctuation"},"/>")]),a(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("androidx.constraintlayout.widget.ConstraintLayout")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("layout")]),n("span",{class:"token punctuation"},">")]),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1})]),_:1}),s[11]||(s[11]=p(`<h3 id="glassbasefragment基类结构" tabindex="-1"><a class="header-anchor" href="#glassbasefragment基类结构" aria-hidden="true">#</a> GlassBaseFragment基类结构</h3><p><code>GlassBaseFragment</code>继承自<code>BaseFragment</code>。它的主要结构如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">GlassBaseFragment</span>
│
├── <span class="token class-name">Methods</span>
│   ├── <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   └── <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│
└── <span class="token class-name">Parent</span>
    └── <span class="token class-name">BaseFragment</span>
      └── <span class="token class-name"><span class="token namespace">androidx<span class="token punctuation">.</span>fragment<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span>Fragment</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是每个部分的功能描述：</p><ol><li><p><strong>Methods</strong>: 类的方法，包括设生命周期事件处理（如<code>onResume</code>、<code>onPause</code>、<code>onDestroy</code>）等。</p></li><li><p>最终父类为<code>androidx.fragment.app.Fragment</code></p></li></ol><h3 id="获取当前的databinding实例" tabindex="-1"><a class="header-anchor" href="#获取当前的databinding实例" aria-hidden="true">#</a> 获取当前的DataBinding实例</h3><p>在<code>GlassBaseFragment</code>的子类中您可以通过v获取当前页面的<code>DataBinding</code>实例。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">protected</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> v<span class="token operator">:</span> DataBinding
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="获取当前的viewmodel实例" tabindex="-1"><a class="header-anchor" href="#获取当前的viewmodel实例" aria-hidden="true">#</a> 获取当前的ViewModel实例</h3><p>在<code>GlassBaseFragment</code>的子类中您可以通过vm获取当前页面的<code>ViewModel</code>实例。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">protected</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> vm<span class="token operator">:</span> ViewModel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="emptyviewmodel" tabindex="-1"><a class="header-anchor" href="#emptyviewmodel" aria-hidden="true">#</a> EmptyViewModel</h4><p>当开发者编写一些不需要<code>ViewModel</code>的简单页面时，可以在声明类的时候传入<code>EmptyViewModel</code>作为空<code>ViewModel</code>。例如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> GlassBaseActivity<span class="token operator">&lt;</span>ActivityMainBinding<span class="token punctuation">,</span> EmptyViewModel<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="快速获取所属activity" tabindex="-1"><a class="header-anchor" href="#快速获取所属activity" aria-hidden="true">#</a> 快速获取所属Activity</h3><p>开发者可以通过<code>baseActivity</code>字段获取当前<code>Fragment</code>所属的<code>GlassBaseActivity</code>，或者通过<code>activity</code>获取当前<code>Fragment</code>所属的<code>BaseActivity</code>(<code>GlassBaseActivity</code>的父类)。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">lateinit</span> <span class="token keyword">var</span> baseActivity<span class="token operator">:</span> GlassBaseActivity<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">&gt;</span>
<span class="token keyword">protected</span> <span class="token keyword">var</span> activity<span class="token operator">:</span> BaseActivity<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="快速获取logcat-tag" tabindex="-1"><a class="header-anchor" href="#快速获取logcat-tag" aria-hidden="true">#</a> 快速获取Logcat TAG</h3><p>开发者可以通过<code>TAG</code>字段获取当前<code>Activity</code>的<code>javaClass.simpleName</code>作为<code>Logcat</code>的日志标签</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">protected</span> <span class="token keyword">val</span> TAG<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>javaClass<span class="token punctuation">.</span>simpleName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="快速打印堆栈调用" tabindex="-1"><a class="header-anchor" href="#快速打印堆栈调用" aria-hidden="true">#</a> 快速打印堆栈调用</h3><p>开发者可以通过调用<code>logE</code>、<code>logW</code>、<code>logD</code>快速打印<code>logcat</code>日志，并可选传入<code>depth</code>打印指定深度的堆栈信息，方便<code>Lambda</code>函数日志打印和Kotlin高阶函数日志打印。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">logE</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Any<span class="token punctuation">,</span> depth<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">logW</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Any<span class="token punctuation">,</span> depth<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">logD</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Any<span class="token punctuation">,</span> depth<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="logcat扩展函数" tabindex="-1"><a class="header-anchor" href="#logcat扩展函数" aria-hidden="true">#</a> Logcat扩展函数</h4><p>我们也为Kotlin开发者提供了此类扩展函数，方便对任意对象做Logcat日志打印。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> Any<span class="token punctuation">.</span><span class="token function">logE</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> Any<span class="token punctuation">.</span><span class="token function">logW</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">..</span><span class="token punctuation">.</span>

<span class="token keyword">fun</span> Any<span class="token punctuation">.</span><span class="token function">logI</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">..</span><span class="token punctuation">.</span>

<span class="token keyword">fun</span> Any<span class="token punctuation">.</span><span class="token function">logV</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">..</span><span class="token punctuation">.</span>

<span class="token keyword">fun</span> Any<span class="token punctuation">.</span><span class="token function">logD</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">..</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="监听用户触发的各类操作交互" tabindex="-1"><a class="header-anchor" href="#监听用户触发的各类操作交互" aria-hidden="true">#</a> 监听用户触发的各类操作交互</h2>`,27)),n("p",null,[s[3]||(s[3]=a("为了避免复杂的操作时间分发，我们推荐开发者从")),s[4]||(s[4]=n("code",null,"GlassActivity",-1)),s[5]||(s[5]=a("中重写相关事件回调方法，根据实际需求完成事件到")),s[6]||(s[6]=n("code",null,"GlassBaseFragment",-1)),s[7]||(s[7]=a("的分发传递。关于如何在")),s[8]||(s[8]=n("code",null,"GlassActivity",-1)),s[9]||(s[9]=a("中监听设备交互事件回调，详见")),t(i,{to:"/docs/basic_framework/interaction_logic_listen.html#%E6%89%8B%E5%8A%BF%E6%93%8D%E4%BD%9C%E5%9B%9E%E8%B0%83"},{default:e(()=>s[2]||(s[2]=[a("交互逻辑/监听手势操作")])),_:1})]),s[12]||(s[12]=p(`<h2 id="跳转页面" tabindex="-1"><a class="header-anchor" href="#跳转页面" aria-hidden="true">#</a> 跳转页面</h2><p>开发者可以通过<code>jumpPage</code>方法便捷的完成页面跳转并携带参数的操作，等效于<code>startActivity</code>等<code>Intent</code>传递操作。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">jumpPage</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> Class<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>

<span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">jumpPage</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> Class<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> map<span class="token operator">:</span> LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3))])}const b=u(k,[["render",m],["__file","template_base_class_base_fragment.html.vue"]]);export{b as default};
