import{_ as o,c as a,o as i,e as c}from"./app-Ne0PdyYx.js";const s="/assets/1_F_EapUfBMsP08Qpytncjrg-CmQRGaJO.png",t="/assets/image-20240411153005240-Ul7hH-zV.png",d={};function l(n,e){return i(),a("div",null,e[0]||(e[0]=[c('<h1 id="sdk-框架概览" tabindex="-1"><a class="header-anchor" href="#sdk-框架概览" aria-hidden="true">#</a> SDK 框架概览</h1><p><code>Glass Application SDK</code> 是一款专为 AR 眼镜设计的开发工具包，基于 <code>MVVM</code> 架构，提供了丰富的基类和 UI 组件，以及统一的操作交互逻辑，封装了对 AR 眼镜上相机和麦克风的操作，能够大大提升开发效率，降低开发难度。</p><h2 id="架构" tabindex="-1"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h2><p>Glass Application SDK 基于 MVVM (Model-View-ViewModel) 架构模式，这种模式允许数据模型、用户界面和行为逻辑分离，提高了代码的可读性和可维护性。</p><p align="center"><img src="'+s+'" alt="img" width="600"></p><ul><li><p><strong>Model</strong>：负责管理应用程序的业务逻辑和数据。在 <code>Glass Application SDK</code> 中，你可以轻松地定义和操作数据模型。</p></li><li><p><strong>View</strong>：负责显示用户界面和接收用户输入。<code>Glass Application SDK</code> 提供了众多适配 AR 眼镜的 UI 组件，能够帮助开发者快速搭建出适合 AR 眼镜的用户界面。</p></li><li><p><strong>ViewModel</strong>：充当 Model 和 View 的中间人，处理 View 的业务逻辑。在 <code>Glass Application SDK</code> 中，你可以利用 ViewModel 来管理和处理用户界面的业务逻辑。</p></li></ul><div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">INFO</p><p>现阶段<code>Glass SDK</code>基于<code>MVVM</code>架构和<code>Material3</code>，SDK封装采用<code>Options API</code>思想，使用<code>DataBinding</code> 框架完成UI和数据的双向绑定。当然，组合优于继承，后续也会推出基于<code>Composition API</code> 设计思想的组合式API，届时将不限制应用架构为<code>MVVM</code>。</p></div><h2 id="基类" tabindex="-1"><a class="header-anchor" href="#基类" aria-hidden="true">#</a> 基类</h2><p><code>Glass Application SDK</code> 提供了以下基类，帮助开发者更加方便地进行开发</p><div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">INFO</p><p><code>GlassBaseApplication</code>：应用程序基类，可以在此基类中进行全局的初始化操作。</p><p><code>GlassBaseActivity</code>：Activity 基类，封装了常用的 Activity 操作，如生命周期管理、UI 更新等。</p><p><code>GlassBaseFragment</code>：Fragment 基类，封装了常用的 Fragment 操作，如生命周期管理、UI 更新等。</p><p><code>GlassBaseDialog</code>：Dialog基类，封装了常用的 Dialog 操作，如生命周期管理、UI 更新等</p></div><h2 id="ui-组件" tabindex="-1"><a class="header-anchor" href="#ui-组件" aria-hidden="true">#</a> UI 组件</h2><p><code>Glass Application SDK</code> 提供了一系列适配 AR 眼镜的 UI 组件，这些组件已经进行了优化，能够在 AR 眼镜上提供良好的用户体验。</p><p align="center"><img src="'+t+'" alt="image-20240411153005240" width="800/"></p><h2 id="操作交互逻辑" tabindex="-1"><a class="header-anchor" href="#操作交互逻辑" aria-hidden="true">#</a> 操作交互逻辑</h2><p><code>Glass Application SDK</code> 统一了 AR 眼镜的操作交互逻辑，开发者无需关心不同型号的 AR 眼镜会有不同的操作方式，只需按照 <code>Glass Application SDK</code> 的操作交互逻辑进行开发，就可以保证在所有支持的 AR 眼镜上都能提供一致的用户体验。</p><h2 id="相机操作" tabindex="-1"><a class="header-anchor" href="#相机操作" aria-hidden="true">#</a> 相机操作</h2><p><code>Glass Application SDK</code> 封装了 AR 眼镜上对相机的操作，开发者可以轻松地调用相机，进行拍照、录像、结合AI分析实时相片帧等操作。</p><p>总的来说，<code>Glass Application SDK</code> 是一款全面、强大的 AR 眼镜开发工具包，无论你是初级开发者还是资深开发者，都可以利用 <code>Glass Application SDK</code> 快速、高效地开发出适合 AR 眼镜的应用程序。</p>',18)]))}const p=o(d,[["render",l],["__file","overview_template_base_class.html.vue"]]);export{p as default};
