import{_ as n,c as r,o as s,e as a}from"./app-Ne0PdyYx.js";const o="/assets/image-20250124013852882-CI9-yu0-.png",t="/assets/image-20250124013954123-B0bRlpPf.png",i="/assets/image-20250124014025086-C9aZ1JIH.png",p={};function d(c,e){return s(),r("div",null,e[0]||(e[0]=[a('<h3 id="应用鉴权" tabindex="-1"><a class="header-anchor" href="#应用鉴权" aria-hidden="true">#</a> 应用鉴权</h3><p>​ 权限体系是Teamhelper保护企业数据资产的核心机制，也是开发者在接入Teamhelper生态时要关注的关键问题，本文帮助你快速了解Teamhelper的权限体系。</p><p><img src="'+o+'" alt="image-20250124013852882"></p><p>应用权限体系分为以下三个维度，这些维度的结合，使得Teamhelper的权限管理更加灵活，安全性更高。</p><ul><li><strong>访问凭证（access_token）</strong>：用于识别应用在访问Teamhelper时使用的虚拟身份，代表应用从平台侧获取的授权。用于验证调用方身份、确保调用方具有执行操作所需要的权限。详情参考 应用访问凭证。</li><li><strong>API</strong> <strong>权限（Scope）</strong>：定义应用能够调用哪些Teamhelper开放能力接口（OpenAPI）。API 接口权限是以应用为维度授予的，每个应用的接口权限都是独立存在的，若多个应用需要调用同一个接口，那么每个应用都要添加对应的接口权限。详情参考 应用 API 权限。</li><li><strong>可用范围</strong>：定义哪些用户可以在Teamhelper中看到和使用该应用，详情参考 应用可用范围。</li></ul><h3 id="用户身份体系" tabindex="-1"><a class="header-anchor" href="#用户身份体系" aria-hidden="true">#</a> 用户身份体系</h3><h4 id="用户身份概述" tabindex="-1"><a class="header-anchor" href="#用户身份概述" aria-hidden="true">#</a> <strong>用户身份概述</strong></h4><p>​ 在自建应用的场景中也是类似，区别在于<strong>自建应用只可在应用开发者所在的租户内使用</strong>， Open ID 在不同的自建应用中不同，但是 Union ID 则相同。</p><p><img src="'+t+'" alt="image-20250124013954123"></p><p><img src="'+i+'" alt="image-20250124014025086"></p><p>​ Open ID 和 Union ID 都是基于应用层面的概念。如果用户处于两个不同的租户下，即 <strong>User ID 不相同的话， Open ID 和 Union ID 也都是隔离的</strong>。</p><p>例如: 上例中的用户小娴除了是「<strong>南京魔数团</strong>」的成员，同时还是租户「<strong>杭州魔数团</strong>」的成员，并且这两个租户都安装了<strong>远程协助</strong>这个应用，小娴在这两个团队内的<strong>远程协助</strong>应用中的<code>union_id</code>也是不相同的。</p><h4 id="用户身份体系-1" tabindex="-1"><a class="header-anchor" href="#用户身份体系-1" aria-hidden="true">#</a> 用户身份体系</h4><p>**user_id：**用户在企业内的身份。 同一个用户在租户 A 和租户 B 内的 user_id 是不同的。</p><p>**open_id：**用户在应用内的身份。 同一个 user_id 在不同应用中的 open_id 不同，其值统一以 ou_ 为前缀，如<code>ou_c99c5f35d542efc7ee492afe11af19ef</code>。</p><p>**union_id：**用户在同一应用服务商提供的多个应用间的统一身份。让应用开发商可以把同个用户(以 user_id 为标识）在多个应用中的身份关联起来。在需要跨应用做用户 ID 关联的场景中，开发者可以使用开放平台提供的 union_id。union_id 以 on_ 为前缀，如 <code>on_cad4860e7af114fb4ff6c5d496d1dd76</code> 。</p>',16)]))}const h=n(p,[["render",d],["__file","basic-concepts.html.vue"]]);export{h as default};
