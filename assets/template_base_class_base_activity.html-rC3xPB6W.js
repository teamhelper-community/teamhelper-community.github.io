import{_ as u,r as o,c as d,o as r,e as p,b as e,a as n,w as t,d as s}from"./app-Ne0PdyYx.js";const k={};function v(m,a){const c=o("CodeGroupItem"),l=o("CodeGroup"),i=o("RouterLink");return r(),d("div",null,[a[4]||(a[4]=p('<h2 id="快速使用" tabindex="-1"><a class="header-anchor" href="#快速使用" aria-hidden="true">#</a> 快速使用</h2><p>创建一个新的<code>Activity</code>继承自<code>GlassBaseActivity</code>，其中<code>GlassBaseActivity</code>继承时需要传入当前<code>Activity</code>的<code>DataBinding</code>泛型类型和<code>ViewModel</code>类型，这样<code>GlassBaseActivity</code>的子类实例化时会根据类型信息通过反射自动创建<code>DataBinding</code>和<code>ViewModel</code>实例。以下是一个简易的代码示例。</p>',2)),e(l,null,{default:t(()=>[e(c,{title:"MainActivity.kt"},{default:t(()=>a[0]||(a[0]=[n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(" MainActivity "),n("span",{class:"token operator"},":"),s(" GlassBaseActivity"),n("span",{class:"token operator"},"<"),s("ActivityMainBinding"),n("span",{class:"token punctuation"},","),s(" EmptyViewModel"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"initParams"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"initData"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"initView"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      	`),n("span",{class:"token comment"},"// v为ActivityMainBinding:ViewDataBinding的实例"),s(`
        v`),n("span",{class:"token punctuation"},"."),s("btnConfirm"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setInstruct"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"InstructSingle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"que ding"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"确定"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"confirm"')]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        v`),n("span",{class:"token punctuation"},"."),s("btnConfirm"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setOnClickListener"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"toast"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"confirm"')]),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        v`),n("span",{class:"token punctuation"},"."),s("btnConfirm"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"focus"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"registerObserve"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1})]),_:1}),e(l,null,{default:t(()=>[e(c,{title:"activity_main.xml"},{default:t(()=>a[1]||(a[1]=[n("div",{class:"language-xml line-numbers-mode","data-ext":"xml"},[n("pre",{class:"language-xml"},[n("code",null,[n("span",{class:"token prolog"},'<?xml version="1.0" encoding="utf-8"?>'),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("layout")]),n("span",{class:"token punctuation"},">")]),s(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("androidx.constraintlayout.widget.ConstraintLayout")]),s(),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"xmlns:"),s("android")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("http://schemas.android.com/apk/res/android"),n("span",{class:"token punctuation"},'"')]),s(`
        `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"xmlns:"),s("app")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("http://schemas.android.com/apk/res-auto"),n("span",{class:"token punctuation"},'"')]),s(`
        `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"xmlns:"),s("tools")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("http://schemas.android.com/tools"),n("span",{class:"token punctuation"},'"')]),s(`
        `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"android:"),s("layout_width")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("match_parent"),n("span",{class:"token punctuation"},'"')]),s(`
        `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"android:"),s("layout_height")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("match_parent"),n("span",{class:"token punctuation"},'"')]),s(`
        `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"tools:"),s("context")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s(".MainActivity"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`

        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("com.mst.basics.slide.widget.v2.GlassButton")]),s(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"android:"),s("id")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("@+id/btn_confirm"),n("span",{class:"token punctuation"},'"')]),s(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"app:"),s("sign")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("1"),n("span",{class:"token punctuation"},'"')]),s(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"app:"),s("layout_constraintStart_toStartOf")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("parent"),n("span",{class:"token punctuation"},'"')]),s(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"app:"),s("layout_constraintTop_toTopOf")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("parent"),n("span",{class:"token punctuation"},'"')]),s(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"app:"),s("layout_constraintEnd_toEndOf")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("parent"),n("span",{class:"token punctuation"},'"')]),s(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"app:"),s("layout_constraintBottom_toBottomOf")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("parent"),n("span",{class:"token punctuation"},'"')]),s(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"android:"),s("layout_width")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("wrap_content"),n("span",{class:"token punctuation"},'"')]),s(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"android:"),s("layout_height")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("wrap_content"),n("span",{class:"token punctuation"},'"')]),s(`
            `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"android:"),s("text")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("确定"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("androidx.constraintlayout.widget.ConstraintLayout")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("layout")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1})]),_:1}),a[5]||(a[5]=p(`<h3 id="glassbaseactivity基类结构" tabindex="-1"><a class="header-anchor" href="#glassbaseactivity基类结构" aria-hidden="true">#</a> GlassBaseActivity基类结构</h3><p><code>GlassBaseActivity</code>继承自<code>BaseActivity</code>，并实现了<code>ISlideEventListener</code>接口。它的主要结构如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">GlassBaseActivity</span>
│
├── <span class="token class-name">Fields</span>
│   ├── hashCode<span class="token operator">:</span> <span class="token class-name">Int</span>
│   ├── instructManager<span class="token operator">:</span> <span class="token class-name">InstructManager</span>
│   ├── slideEventManager<span class="token operator">:</span> <span class="token class-name">SlideEventManager</span>
│   ├── slideEventViewManager<span class="token operator">:</span> <span class="token class-name">SlideEventViewManager<span class="token punctuation">.</span>Builder</span>
│   ├── glassLoadingDialog<span class="token operator">:</span> <span class="token class-name">GlassLoadingDialog</span><span class="token operator">?</span>
│   └── downloadDialog<span class="token operator">:</span> <span class="token class-name">GlassDownloadDialog</span><span class="token operator">?</span>
│
├── <span class="token class-name">Methods</span>
│   ├── <span class="token function">setInstruct</span><span class="token punctuation">(</span>instructSingle<span class="token operator">:</span> <span class="token class-name">InstructSingle</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">setFocusView</span><span class="token punctuation">(</span>view<span class="token operator">:</span> <span class="token class-name">ISlideEventViewListener</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">beforeInitLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">afterInitLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">onKeyUp</span><span class="token punctuation">(</span>keyCode<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> event<span class="token operator">:</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Boolean</span>
│   ├── <span class="token function">onKeyDown</span><span class="token punctuation">(</span>keyCode<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> event<span class="token operator">:</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Boolean</span>
│   ├── <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Boolean</span>
│   ├── <span class="token function">onSuperKeyTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── get slideEvenMode<span class="token operator">:</span> <span class="token class-name">Int</span>
│   ├── <span class="token function">setSlideEventMode</span><span class="token punctuation">(</span>slideEventMode<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">showLoading</span><span class="token punctuation">(</span>title<span class="token operator">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">dismissLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">showDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">setDownloadProgress</span><span class="token punctuation">(</span>progress<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">dismissDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">onEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">onBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">onForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">onBackward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">onForwardMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">onBackwardMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   ├── <span class="token function">onBackHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│   └── <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span>
│
└── <span class="token class-name">Interfaces</span>
│   └── <span class="token class-name">ISlideEventListener</span>
│
└── <span class="token class-name">Parent</span>
    └── <span class="token class-name">BaseActivity</span>
      └── <span class="token class-name"><span class="token namespace">androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span>AppCompatActivity</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是每个部分的功能描述：</p><ol><li><p><strong>Fields</strong>: 类的字段，包括<code>hashCode</code>、指令管理器、滑动事件管理器、滑动事件视图管理器、加载对话框和下载对话框。</p></li><li><p><strong>Methods</strong>: 类的方法，包括设置指令、焦点、初始化布局前后的操作、生命周期事件处理（如<code>onResume</code>、<code>onPause</code>、<code>onDestroy</code>）、键盘和触摸事件处理、对话框的显示和隐藏、滑动事件的处理等。</p></li><li><p><strong>Interfaces</strong>: <code>GlassBaseActivity</code>实现了<code>ISlideEventListener</code>接口，便于开发者做事件监听的扩展。</p></li></ol><h3 id="获取当前的databinding实例" tabindex="-1"><a class="header-anchor" href="#获取当前的databinding实例" aria-hidden="true">#</a> 获取当前的DataBinding实例</h3><p>在<code>GlassBaseActivity</code>的子类中您可以通过v获取当前页面的<code>DataBinding</code>实例。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">protected</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> v<span class="token operator">:</span> DataBinding
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="获取当前的viewmodel实例" tabindex="-1"><a class="header-anchor" href="#获取当前的viewmodel实例" aria-hidden="true">#</a> 获取当前的ViewModel实例</h3><p>在<code>GlassBaseActivity</code>的子类中您可以通过vm获取当前页面的<code>ViewModel</code>实例。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">protected</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> vm<span class="token operator">:</span> ViewModel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="emptyviewmodel" tabindex="-1"><a class="header-anchor" href="#emptyviewmodel" aria-hidden="true">#</a> EmptyViewModel</h4><p>当开发者编写一些不需要<code>ViewModel</code>的简单页面时，可以在声明类的时候传入<code>EmptyViewModel</code>作为空<code>ViewModel</code>。例如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> GlassBaseActivity<span class="token operator">&lt;</span>ActivityMainBinding<span class="token punctuation">,</span> EmptyViewModel<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="快速获取context" tabindex="-1"><a class="header-anchor" href="#快速获取context" aria-hidden="true">#</a> 快速获取Context</h3><p>开发者可以通过<code>mContext</code>字段获取当前页面的Context，当然你也可以通过<code>Kotlin</code>语法下的<code>baseContext</code>获取<code>Context</code>，对应Java语法下的<code>getBaseContext()</code>。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">protected</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> mContext<span class="token operator">:</span> AppCompatActivity
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="快速获取logcat-tag" tabindex="-1"><a class="header-anchor" href="#快速获取logcat-tag" aria-hidden="true">#</a> 快速获取Logcat TAG</h3><p>开发者可以通过<code>TAG</code>字段获取当前<code>Activity</code>的<code>javaClass.simpleName</code>作为<code>Logcat</code>的日志标签</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">protected</span> <span class="token keyword">val</span> TAG<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>javaClass<span class="token punctuation">.</span>simpleName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="快速打印堆栈调用" tabindex="-1"><a class="header-anchor" href="#快速打印堆栈调用" aria-hidden="true">#</a> 快速打印堆栈调用</h3><p>开发者可以通过调用<code>logE</code>、<code>logW</code>、<code>logD</code>快速打印<code>logcat</code>日志，并可选传入<code>depth</code>打印指定深度的堆栈信息，方便<code>Lambda</code>函数日志打印和Kotlin高阶函数日志打印。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">logE</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Any<span class="token punctuation">,</span> depth<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">logW</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Any<span class="token punctuation">,</span> depth<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">logD</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Any<span class="token punctuation">,</span> depth<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="logcat扩展函数" tabindex="-1"><a class="header-anchor" href="#logcat扩展函数" aria-hidden="true">#</a> Logcat扩展函数</h4><p>我们也为Kotlin开发者提供了此类扩展函数，方便对任意对象做Logcat日志打印。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> Any<span class="token punctuation">.</span><span class="token function">logE</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> Any<span class="token punctuation">.</span><span class="token function">logW</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">..</span><span class="token punctuation">.</span>

<span class="token keyword">fun</span> Any<span class="token punctuation">.</span><span class="token function">logI</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">..</span><span class="token punctuation">.</span>

<span class="token keyword">fun</span> Any<span class="token punctuation">.</span><span class="token function">logV</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">..</span><span class="token punctuation">.</span>

<span class="token keyword">fun</span> Any<span class="token punctuation">.</span><span class="token function">logD</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">..</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关闭当前页面" tabindex="-1"><a class="header-anchor" href="#关闭当前页面" aria-hidden="true">#</a> 关闭当前页面</h3><p>开发者可以通过<code>finish</code>函数结束当前页面，并可指定传入延迟关闭参数。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">finish</span><span class="token punctuation">(</span>millisecond<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="监听用户触发的各类操作交互" tabindex="-1"><a class="header-anchor" href="#监听用户触发的各类操作交互" aria-hidden="true">#</a> 监听用户触发的各类操作交互</h2>`,30)),n("p",null,[a[3]||(a[3]=s("详见")),e(i,{to:"/docs/basic_framework/interaction_logic_listen.html#%E6%89%8B%E5%8A%BF%E6%93%8D%E4%BD%9C%E5%9B%9E%E8%B0%83"},{default:t(()=>a[2]||(a[2]=[s("交互逻辑/监听手势操作")])),_:1})]),a[6]||(a[6]=p(`<h2 id="全屏显示内置对话框" tabindex="-1"><a class="header-anchor" href="#全屏显示内置对话框" aria-hidden="true">#</a> 全屏显示内置对话框</h2><ul><li>显示加载对话框</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">showLoading</span><span class="token punctuation">(</span>title<span class="token operator">:</span> String<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>取消加载对话框</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">dismissLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>显示下载对话框</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">showDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>设置下载对话框进度</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">setDownloadProgress</span><span class="token punctuation">(</span>progress<span class="token operator">:</span> Int<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>取消下载对话框</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">dismissDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="在初始化布局前设置window相关属性" tabindex="-1"><a class="header-anchor" href="#在初始化布局前设置window相关属性" aria-hidden="true">#</a> 在初始化布局前设置window相关属性</h2><p>开发者可以通过重写<code>beforeInitLayout</code>方法，在GlassPage初始化布局前设置<code>window</code>相关<code>flag</code>。如下例如全屏等：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">beforeInitLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">beforeInitLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    window<span class="token punctuation">.</span>decorView<span class="token punctuation">.</span>systemUiVisibility <span class="token operator">=</span>
        View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_LAYOUT_STABLE <span class="token operator">or</span> View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
    <span class="token keyword">val</span> lp <span class="token operator">=</span> window<span class="token punctuation">.</span>attributes
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">&gt;=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>P<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lp<span class="token punctuation">.</span>layoutInDisplayCutoutMode <span class="token operator">=</span>
            WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES
    <span class="token punctuation">}</span>
    window<span class="token punctuation">.</span>attributes <span class="token operator">=</span> lp
    window<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>
        WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_FULLSCREEN<span class="token punctuation">,</span> WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_FULLSCREEN
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="切换滑动-滚动模式" tabindex="-1"><a class="header-anchor" href="#切换滑动-滚动模式" aria-hidden="true">#</a> 切换滑动/滚动模式</h2><p>开发者可以通过<code>setSlideEventMode</code>切换重用当前触摸板或旋钮原先的<code>前滑</code>、<code>后滑</code>事件，使之切换为<code>前滑距离</code>或<code>后滑距离</code>，同时用户若进行前滑或后滑操作，则会持续在<code>GlassPage</code>中的<code>onForwardMove</code>或<code>onBackwardMove</code>回调，开发者可以基于此特性实现前后滑动变焦或缩放等人机交互，改善XR眼镜操作体验。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * 切换滑块 滑动模式
 *
 * @param slideEventMode [com.mst.basics.slide.event.SlideEvent.Mode]
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">setSlideEventMode</span><span class="token punctuation">(</span>slideEventMode<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    slideEventManager<span class="token punctuation">.</span>slideEventMode <span class="token operator">=</span> slideEventMode
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SlideEvent</span> <span class="token punctuation">{</span>

    <span class="token keyword">interface</span> <span class="token class-name">Mode</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 前滑或者后滑(默认)
         */</span>
        <span class="token keyword">int</span> <span class="token constant">FORWARD_OR_BACKWARD</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 前滑距离或者后滑距离
         */</span>
        <span class="token keyword">int</span> <span class="token constant">FORWARD_DISTANCE_OR_BACKWARD_DISTANCE</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="页面级超级按键" tabindex="-1"><a class="header-anchor" href="#页面级超级按键" aria-hidden="true">#</a> 页面级超级按键</h2><p>在Activity中重写<code>onSuperKeyTrigger</code>方法可以捕捉到用户进行<code>触摸板长按</code>或<code>旋钮长按</code>的事件，我们推荐开发者将此<code>长按</code>事件作为页面内最重要操作的触发逻辑，如页面内导航指示的Tips或高优先级菜单项等，我们称之为<code>超级按键</code>。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSuperKeyTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSuperKeyTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="跳转页面" tabindex="-1"><a class="header-anchor" href="#跳转页面" aria-hidden="true">#</a> 跳转页面</h2><p>开发者可以通过<code>jumpPage</code>方法便捷的完成页面跳转并携带参数的操作，等效于<code>startActivity</code>等<code>Intent</code>传递操作。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">jumpPage</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> Class<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>

<span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">jumpPage</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> Class<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> map<span class="token operator">:</span> LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24))])}const g=u(k,[["render",v],["__file","template_base_class_base_activity.html.vue"]]);export{g as default};
