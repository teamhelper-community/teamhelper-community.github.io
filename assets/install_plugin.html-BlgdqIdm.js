import{_ as s,c as a,o as t,e as p}from"./app-Ne0PdyYx.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<p><code>Glass Plugin Container</code>提供基础的插件APK安装API，开发者需要自行维护插件APK的下载与保存（理解为应用市场），假设目前我们有插件应用包，下载保存在绝对路径<code>/sdcard/testplugin.apk</code>下，插件应用包名为<code>com.mst.testplugin</code>，那么我们可以通过以下四种方式将插件APK安装进<code>Glass Plugin Container</code>。</p><h2 id="根据包名安装插件应用" tabindex="-1"><a class="header-anchor" href="#根据包名安装插件应用" aria-hidden="true">#</a> 根据包名安装插件应用</h2><p>在宿主应用克隆场景（较少），开发者可以将安卓系统上已安装的应用克隆安装进插件容器，仅需传入应用包名。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>PluginEngine<span class="token punctuation">.</span><span class="token function">installPlugin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.mst.testplugin&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * 安装插件
 * @param source pkg or apk absolute path
 * @param userId virtual user namespace
 */</span>
<span class="token keyword">fun</span> <span class="token function">installPlugin</span><span class="token punctuation">(</span>source<span class="token operator">:</span> String<span class="token punctuation">,</span> userId<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> InstallResult
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="根据uri安装插件应用" tabindex="-1"><a class="header-anchor" href="#根据uri安装插件应用" aria-hidden="true">#</a> 根据Uri安装插件应用</h2><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>注意申请文件存储读写权限</p></div><p>开发者可以通过文件<code>Uri</code>的方式传入需要安装进插件容器的插件APK路径。</p><div class="language-Kotlin line-numbers-mode" data-ext="Kotlin"><pre class="language-Kotlin"><code>PluginEngine.installPlugin(&quot;file:///sdcard/testplugin.apk&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="从文件安装插件应用" tabindex="-1"><a class="header-anchor" href="#从文件安装插件应用" aria-hidden="true">#</a> 从文件安装插件应用</h2><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>注意申请文件存储读写权限</p></div><p>开发者可以通过<code>File</code>对象的方式传入需要安装进插件容器的插件APK文件实例。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>PluginEngine<span class="token punctuation">.</span><span class="token function">installPlugin</span><span class="token punctuation">(</span><span class="token function">File</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/sdcard/testplugin.apk&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * 安装插件
 * @param source pkg or apk absolute path
 * @param userId virtual user namespace
 */</span>
<span class="token keyword">fun</span> <span class="token function">installPlugin</span><span class="token punctuation">(</span>source<span class="token operator">:</span> File<span class="token punctuation">,</span> userId<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> InstallResult
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="从assets资源目录安装插件应用" tabindex="-1"><a class="header-anchor" href="#从assets资源目录安装插件应用" aria-hidden="true">#</a> 从assets资源目录安装插件应用</h2><p>在交付B端定制化项目时（期望容器与交付应用以及依赖的基础服务捆绑打包），开发者需要先将<code>assets</code>目录当中的插件APK在容器首次启动时解压到内置存储，然后通过<code>Uri</code>或者<code>File</code>对象的方式安装插件应用。以下给出解压<code>assets</code>目录下文件的代码参考。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream


<span class="token keyword">fun</span> <span class="token function">copyAssets</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> assetDir<span class="token operator">:</span> String<span class="token punctuation">,</span> dir<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> files<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> String<span class="token operator">&gt;</span> <span class="token operator">=</span> context<span class="token punctuation">.</span>assets<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>assetDir<span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token keyword">return</span>
    <span class="token keyword">val</span> mWorkingPath <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span>
    <span class="token comment">// 如果文件路径不存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mWorkingPath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建文件夹</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mWorkingPath<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 文件夹创建不成功时调用</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> files<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获得每个文件的名字</span>
            <span class="token keyword">val</span> fileName <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token comment">// 根据路径判断是文件夹还是文件</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>assetDir<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">copyAssets</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">dir</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">fileName</span></span><span class="token string">/&quot;</span></span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">copyAssets</span><span class="token punctuation">(</span>
                        context<span class="token punctuation">,</span>
                        <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">assetDir</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">fileName</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> dir <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot;/&quot;</span></span>
                                <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot;/&quot;</span></span>
                    <span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">val</span> outFile <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>mWorkingPath<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>outFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> outFile<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">var</span> \`<span class="token keyword">in</span>\`<span class="token operator">:</span> InputStream<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
            \`<span class="token keyword">in</span>\` <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>assetDir<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">assetDir</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">fileName</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">else</span> context<span class="token punctuation">.</span>assets
                <span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
            <span class="token keyword">val</span> <span class="token keyword">out</span><span class="token operator">:</span> OutputStream <span class="token operator">=</span> <span class="token function">FileOutputStream</span><span class="token punctuation">(</span>outFile<span class="token punctuation">)</span>
            <span class="token comment">// Transfer bytes from in to out</span>
            <span class="token keyword">val</span> buf <span class="token operator">=</span> <span class="token function">ByteArray</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
            <span class="token keyword">var</span> len<span class="token operator">:</span> Int
            <span class="token keyword">while</span> <span class="token punctuation">(</span>\`<span class="token keyword">in</span>\`<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> len <span class="token operator">=</span> it <span class="token punctuation">}</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            \`<span class="token keyword">in</span>\`<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> FileNotFoundException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然以下函数已经包含在<code>Glass Application SDK</code>中，可以直接通过以下方式使用。在下面的例子中，我们在<code>App</code>启动时在子线程中将<code>assets</code>目录当中的<code>plugins</code>文件夹解压到了<code>filesDir</code>当中，在后续你可以通过上述的插件安装API完成插件应用的安装操作。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> App <span class="token operator">:</span> <span class="token function">GlassBaseApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">addApplications</span><span class="token punctuation">(</span>appConfig<span class="token operator">:</span> AppConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addApplications</span><span class="token punctuation">(</span>appConfig<span class="token punctuation">)</span>
        appConfig<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">TTSApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        workerHandler<span class="token punctuation">.</span><span class="token function">post</span> <span class="token punctuation">{</span>
            <span class="token function">copyAssets</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@App</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;video&quot;</span></span><span class="token punctuation">,</span> filesDir<span class="token punctuation">.</span>absolutePath <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot;/plugins/&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19)]))}const l=s(e,[["render",o],["__file","install_plugin.html.vue"]]);export{l as default};
