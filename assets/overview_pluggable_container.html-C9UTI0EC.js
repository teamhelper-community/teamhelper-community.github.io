import{_ as o,c as n,o as s,e as i}from"./app-Ne0PdyYx.js";const t="/assets/banner-Dgm3Qw3h.svg",a="/assets/image-20240418181504552-r0SsBOmL.svg",c={};function r(l,e){return s(),n("div",null,e[0]||(e[0]=[i('<p align="center"><img align="center" src="'+t+'" alt="Exposed" width="960"></p><br><br><blockquote><p><code>Glass Plugin Container</code> 是基于<code>Android Framework</code>虚拟化的沙盒系统，使应用程序模块化，更易扩展和维护，实现免安装</p></blockquote><div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">INFO</p><p>我们设计的<code>Glass Plugin Container</code>是完全依据⽤户空间构建的⼀个虚拟容器，第三方开发者可以将各类场景解决⽅案以容器内插件内置、或以应⽤市场形式下发，并可依此能⼒完成场景应⽤的私有化远程交付。</p><p>现在我们将<code>Glass Plugin Container</code>的核心功能对外共享，将核心实现以<code>Glass PluginCore SDK</code>对外开放。<code>Glass PluginCore SDK</code> 是一个专用于XR设备的Android应用程序虚拟化框架，它允许用户在无需安装的情况下运行任何应用程序，从而实现了应用程序（场景解决方案交付包）的&quot; 插件化&quot;。它通过创建一个虚拟的环境，模拟Android系统的各种服务和组件，以实现在这个环境中运行应用程序。</p></div><h2 id="研发初衷" tabindex="-1"><a class="header-anchor" href="#研发初衷" aria-hidden="true">#</a> 研发初衷</h2><p>实现免安装运行APK，并将核心能力抽象为服务作为独立的APK插件加载独立维护，可以实现远程动态加载业务APK，并自由调用容器内的APK服务，这便是<code>Glass Plugin Container</code> 的研发初衷。</p><h2 id="与glassapplicationsdk的关系" tabindex="-1"><a class="header-anchor" href="#与glassapplicationsdk的关系" aria-hidden="true">#</a> 与GlassApplicationSDK的关系</h2><p><img src="'+a+'" alt="image-20240418181504552"></p><p>以上的架构图能很好地表达出<code>Glass Application SDK</code>与<code>Glass Plugin Container</code>之间的关系。</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p><code>Glass Application SDK</code> ：开发XR眼镜应用最基础的SDK包。包含XR应用开发基础所需的所有套件，主要为统一交互逻辑和适用于XR眼镜的UI组件。目的是为开发者提供统一的硬件交互接口、为用户在各厂商AR硬件上带来更一致使用体验。</p><p><code>Glass Plugin Container</code>：提供插件化能力的基础容器，用于实现免安装运行XR眼镜插件应用，可依托此实现插件APK（场景解决方案包）的远程下发和免安装运行，可对已安装插件应用进行完全管理的一个基础容器。</p></div><h2 id="容器的提供形式" tabindex="-1"><a class="header-anchor" href="#容器的提供形式" aria-hidden="true">#</a> 容器的提供形式</h2><p><code>Glass Plugin Container</code>对第三方开发者的提供形式为<code>Glass Plugin Container SDK</code>，包含了<code>Glass Plugin Container</code> 插件化容器的所有核心代码的一个方便容器做OEM定制开发的一个<code>OEM SDK</code>。下文所涉及到API章节全部是<code>Glass Plugin Container SDK</code> 包含的API，开发者依赖了<code>Glass Plugin Container SDK</code>之后就可以以OEM的形式定制自己的插件化容器。</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>运行在Glass上的插件化容器实际就是包含了插件化功能的特殊的Glass应用，因此开发方式基本与Glass应用相同，都需要集成<code>Glass Application SDK</code> ，插件化容器开发需要额外依赖<code>Glass Plugin Container SDK</code>。</p></div>',14)]))}const p=o(c,[["render",r],["__file","overview_pluggable_container.html.vue"]]);export{p as default};
